// generator client {
//   provider = "prisma-client-js"
//   previewFeatures = ["driverAdapters"]
// }
//
// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model analytic_settings {
  id          Int     @id @default(autoincrement())
  campaign_id String? @unique(map: "analytic_settings_campaign_id_unique")

  open_rate          Boolean @default(false) // app  level
  reply_rate         Boolean @default(false) // smtp level
  opt_out_rate       Boolean @default(false) // app
  opt_out_url        Boolean @default(false)
  bounce_rate        Boolean @default(false) // 
  click_through_rate Boolean @default(false) // app level
}

model campaign {
  id                         Int                          @id @default(autoincrement())
  name                       String
  created_at                 Int
  updated_at                 Int
  deadline                   DateTime?                    @default(now())
  // analytic_settings                                        analytic_settings?
  user_id                    Int
  campaign_sender_email_link campaign_sender_email_link[]
  email_opt_out_event        email_opt_out_event[]
  sequence_break             sequence_break[]
  sequence_step              sequence_step[]
  user                       user                         @relation(fields: [userId], references: [id])
  userId                     Int
  workspace                  workspace                    @relation(fields: [workspaceId], references: [id])
  workspaceId                Int
}

model campaign_sender_email_link {
  id              Int          @id @default(autoincrement())
  campaign_id     Int
  sender_email_id Int
  sender_email    sender_email @relation(fields: [sender_email_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  campaign        campaign     @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model cart {
  id        Int         @id @default(autoincrement())
  user_id   Int         @unique(map: "cart_user_id_unique")
  user      user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart_item cart_item[]
}

model cart_item {
  id      Int     @id @default(autoincrement())
  cart_id Int
  name    String? @unique()
  cart    cart    @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([cart_id, name], map: "cart_item_cart_id_name_unique")
}

model contabo_token {
  id                       Int      @id @default(autoincrement())
  token                    String
  expires_at               DateTime
  refresh_token            String
  refresh_token_expires_at Int
}

model contact {
  id           Int      @id @default(autoincrement())
  name         String
  email        String
  company_name String?
  created_at   DateTime @default(now())
}

model domain {
  id           Int      @id @default(autoincrement())
  user_id      Int
  purchased_at DateTime @default(now())
  name         String   @unique(map: "domain_name_unique")
  purchased_by user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  vps_id Int? @map("splitbox_id")
  vps    vps? @relation(fields: [vps_id], references: [id], onDelete: SetNull, onUpdate: SetNull)

  workspace_id Int
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  // workspace_id
  mailbox      mailbox[]

  ipv6 String?

  deletedAt DateTime?
}

model domain_purchase_form_info {
  id             Int     @id @default(autoincrement())
  user_id        Int     @unique(map: "domain_purchase_form_info_user_id_unique")
  first_name     String? @map("registrant_first_name")
  last_name      String? @map("registrant_last_name")
  address        String? @map("registrant_address_1")
  city           String? @map("registrant_city")
  state_province String? @map("registrant_state_province")
  postal_code    String? @map("registrant_postal_code")
  country        String? @map("registrant_country")
  email_address  String? @map("registrant_email_address")
  phone_code     String? @map("registrant_phone_country_code")
  phone_number   String? @map("registrant_phone_number")
  user_old       user    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model email_bounce_event {
  id               Int            @id @default(autoincrement())
  target_email     String
  sequence_step_id Int?
  created_at       DateTime       @default(now())
  name             String
  sec              String
  sequence_step    sequence_step? @relation(fields: [sequence_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum DomainTransferStatus {
  ERROR
  UNKNOWN
  SUCCESS
  QUEUED  @map("INIT")
}

model domain_transfer {
  id         Int                  @id @default(autoincrement())
  name       String
  status     DomainTransferStatus @default(QUEUED)
  created_at DateTime             @default(now())

  note String?

  transfer_id String @unique()

  workspace   workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int

  creator user @relation(fields: [userId], references: [id])
  userId  Int

  deletedAt DateTime?
}

model email_link_click_event {
  id            Int            @id @default(autoincrement())
  target_email  String
  sequence_id   Int?
  link          String
  created_at    DateTime       @default(now())
  sequence_step sequence_step? @relation(fields: [sequence_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model email_open_event {
  id            Int            @id @default(autoincrement())
  target_email  String
  sequence_id   Int?
  created_at    DateTime       @default(now())
  sequence_step sequence_step? @relation(fields: [sequence_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([sequence_id, target_email], map: "email_open_event_sequence_id_target_email_unique")
}

model email_opt_out_event {
  id           Int      @id @default(autoincrement())
  target_email Int
  created_at   DateTime @default(now())
  campaign_id  Int
  campaign     campaign @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([target_email, campaign_id], map: "email_opt_out_event_target_email_campaign_id_unique")
}

model google_tokens {
  id            Int     @id @default(autoincrement())
  google_id     String  @unique(map: "google_tokens_google_id_unique")
  access_token  String
  expires_in    Int
  refresh_token String
  scope         String
  token_type    String
  id_token      String?
}

model google_user_info {
  id             Int     @id @default(autoincrement())
  email          String  @unique(map: "google_user_info_email_unique")
  google_id      String  @unique(map: "google_user_info_google_id_unique")
  verified_email Int
  name           String
  given_name     String?
  family_name    String?
  picture        String
  locale         String?
}

model migrations {
  id         Int       @id @default(autoincrement())
  name       String
  applied_at DateTime? @default(now())
}

model sender_email {
  id                         Int                          @id @default(autoincrement())
  from_name                  String
  from_email                 String
  user_name                  String
  password                   String
  smtp_host                  String
  smtp_port                  Int
  imap_host                  String
  imap_port                  Int
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @default(now())
  campaign_sender_email_link campaign_sender_email_link[]
}

model sequence_break {
  id              Int       @id @default(autoincrement())
  length_in_hours Int
  index           Int
  campaign_id     Int?
  campaign        campaign? @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sequence_step {
  id                     Int                      @id @default(autoincrement())
  title                  String?
  content                String?
  index                  Int
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @default(now())
  campaign_id            Int
  state                  String                   @default("waiting")
  format                 String                   @default("html")
  email_bounce_event     email_bounce_event[]
  email_link_click_event email_link_click_event[]
  email_open_event       email_open_event[]
  campaign               campaign                 @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum MailBoxStatus {
  PENDING @map("INIT")
  ADDED
}

model mailbox {
  id Int @id @default(autoincrement())

  domain   domain @relation(fields: [domainId], references: [id])
  domainId Int

  firstName String
  lastName  String?

  username String
  password String
  status   MailBoxStatus @default(PENDING)

  workspace workspace @relation(fields: [workspaceId], references: [id])

  deletedAt   DateTime?
  workspaceId Int
}

model vps {
  id                             Int    @id @default(autoincrement())
  name                           String
  compute_id_on_hosting_platform String @unique(map: "splitbox_compute_id_on_hosting_platform_unique")

  userId Int?
  user   user?    @relation(fields: [userId], references: [id])
  domain domain[]

  workspace   workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId Int?

  ipv6Enabled Boolean @default(false)

  emailwizInitiated Boolean @default(false)

  createdAt DateTime?

  @@map("splitbox")
}

model user {
  id                             Int                         @id @default(autoincrement())
  email                          String?
  email_verified                 Boolean
  firebase_id                    String                      @unique()
  oauth_provider                 String
  password                       String?
  created_at                     DateTime                    @default(now())
  updated_at                     DateTime                    @default(now())
  workspace_user_join_list       workspace_user_join[]
  domain_purchase_form_info_list domain_purchase_form_info[]
  domains                        domain[]
  carts                          cart[]
  campaigns                      campaign[]
  splitbox                       vps[]
  domainTransfers                domain_transfer[]
}

model workspace {
  id                  Int                   @id @default(autoincrement())
  name                String
  workspace_user_join workspace_user_join[]
  domain              domain[]
  splitbox            vps[]
  campaign            campaign[]
  mailbox             mailbox[]
  domainTransfers     domain_transfer[]
}

model workspace_user_join {
  id           Int       @id @default(autoincrement())
  user_id      Int
  workspace_id Int
  role         String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tld_price_info {
  id                          Int                     @id @default(autoincrement())
  name                        String                  @unique()
  min_registration_year_count Int
  tld_yearly_price_info       tld_yearly_price_info[]
}

model tld_yearly_price_info {
  id           Int @id @default(autoincrement())
  tld_price_id Int @map("tld_price_info_id")
  price        Int
  year         Int

  tld_price_info tld_price_info @relation(fields: [tld_price_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tld_price_id, year])
}
